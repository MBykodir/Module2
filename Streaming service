#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Структура для представлення медіа-елемента (фільму, музичного треку тощо)
typedef struct {
    char title[100]; // Назва медіа-елемента
    int duration; // Тривалість медіа-елемента в хвилинах
} MediaElement;

// Структура для представлення користувача
typedef struct {
    char username[50]; // Ім'я користувача
    char email[100]; // Електронна пошта користувача
    char password[50]; // Пароль користувача
} User;

// Структура для представлення медіа-файлу
typedef struct {
    char filename[100]; // Назва файлу
    MediaElement* media; // Вказівник на медіа-елемент
} MediaFile;

// Функція для створення нового користувача
User* createUser(const char* username, const char* email, const char* password) {
    User* user = (User*)malloc(sizeof(User));
    if (user == NULL) {
        return NULL;
    }
    strcpy(user->username, username);
    strcpy(user->email, email);
    strcpy(user->password, password);
    return user;
}

// Функція для створення нового медіа-елемента
MediaElement* createMediaElement(const char* title, int duration) {
    MediaElement* media = (MediaElement*)malloc(sizeof(MediaElement));
    if (media == NULL) {
        return NULL;
    }
    strcpy(media->title, title);
    media->duration = duration;
    return media;
}

// Функція для створення нового медіа-файлу
MediaFile* createMediaFile(const char* filename, const char* title, int duration) {
    MediaFile* mediaFile = (MediaFile*)malloc(sizeof(MediaFile));
    if (mediaFile == NULL) {
        return NULL;
    }
    strcpy(mediaFile->filename, filename);
    mediaFile->media = createMediaElement(title, duration);
    if (mediaFile->media == NULL) {
        free(mediaFile);
        return NULL;
    }
    return mediaFile;
}

// Структура для представлення списку користувачів
typedef struct {
    User** users;
    int count;
} UserList;

// Функція для створення нового списку користувачів
UserList* createUserList() {
    UserList* userList = (UserList*)malloc(sizeof(UserList));
    if (userList == NULL) {
        return NULL;
    }
    userList->users = NULL;
    userList->count = 0;
    return userList;
}

// Функція для додавання користувача до списку користувачів
int addUserToUserList(UserList* userList, const char* username, const char* email, const char* password) {
    User* user = createUser(username, email, password);
    if (user == NULL) {
        return 0; // Помилка при створенні користувача
    }
    // Збільшимо розмір списку користувачів і додамо нового користувача
    userList->count++;
    userList->users = (User**)realloc(userList->users, sizeof(User*) * userList->count);
    if (userList->users == NULL) {
        return 0; // Помилка при реалокації пам'яті для списку користувачів
    }
    userList->users[userList->count - 1] = user;
    return 1; // Успішно додано користувача
}

// Функція для пошуку медіа-файлу за назвою
MediaFile* searchMediaFileByTitle(MediaFile** mediaFiles, int count, const char* title) {
    for (int i = 0; i < count; i++) {
        if (strcmp(mediaFiles[i]->media->title, title) == 0) {
            return mediaFiles[i];
        }
    }
    return NULL; // Медіа-файл не знайдено
}

// Головна функція
int main() {
    // Створення списку користувачів
    UserList* userList = createUserList();

    // Додавання користувачів
    addUserToUserList(userList, "JohnDoe", "johndoe@example.com", "password123");
    addUserToUserList(userList, "AliceSmith", "alice@example.com", "secret456");

    // Створення медіа-файлів
    MediaFile* mediaFiles[2];
    mediaFiles[0] = createMediaFile("video1.mp4", "Video 1", 120);
    mediaFiles[1] = createMediaFile("music1.mp3", "Music 1", 180);

    // Пошук медіа-файлу за назвою
    MediaFile* foundMediaFile = searchMediaFileByTitle(mediaFiles, 2, "Video 1");
    if (foundMediaFile != NULL) {
        printf("Found Media File: %s (Duration: %d minutes)\n", foundMediaFile->filename, foundMediaFile->media->duration);
    } else {
        printf("Media File not found.\n");
    }

    // Звільнення пам'яті користувачів
    for (int i = 0; i < userList->count; i++) {
        free(userList->users[i]);
    }
    free(userList->users);
    free(userList);

    // Звільнення пам'яті медіа-файлів
    for (int i = 0; i < 2; i++) {
        free(mediaFiles[i]->media);
        free(mediaFiles[i]);
    }

    return 0;
}
